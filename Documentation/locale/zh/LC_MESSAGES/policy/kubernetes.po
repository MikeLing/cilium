# SOME DESCRIPTIVE TITLE.
# Copyright (C) Cilium Authors
# This file is distributed under the same license as the Cilium package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Cilium \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-25 23:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../policy/kubernetes.rst:3 bd9e997713ec44ceb72b7b0913649b56
msgid ""
"WARNING: You are looking at unreleased Cilium documentation. Please use "
"the official rendered version released here: https://docs.cilium.io"
msgstr ""

#: ../../policy/kubernetes.rst:8 6abdae002a29454c8c8303d02fa6be4e
msgid "Using Kubernetes constructs in policy"
msgstr ""

#: ../../policy/kubernetes.rst:10 d1642f26539d4d7eb785a8e3b6b5e279
msgid "This section covers Kubernetes specific network policy aspects."
msgstr ""

#: ../../policy/kubernetes.rst:15 1972acd33bda40709946b31713c95a93
msgid "Namespaces"
msgstr ""

#: ../../policy/kubernetes.rst:17 0a41465b53ea4b319ff7824c0d0c48d4
msgid ""
"`Namespaces <https://kubernetes.io/docs/concepts/overview/working-with-"
"objects/namespaces/>`_ are used to create virtual clusters within a "
"Kubernetes cluster. All Kubernetes objects including NetworkPolicy and "
"CiliumNetworkPolicy belong to a particular namespace. Depending on how a "
"policy is being defined and created, Kubernetes namespaces are "
"automatically being taken into account:"
msgstr ""

#: ../../policy/kubernetes.rst:23 dba7a9858e474b0a97095afd415f2b8b
msgid ""
"Network policies created and imported as `CiliumNetworkPolicy` CRD and "
"`NetworkPolicy` apply within the namespace, i.e. the policy only applies "
"to pods within that namespace. It is however possible to grant access to "
"and from pods in other namespaces as described below."
msgstr ""

#: ../../policy/kubernetes.rst:28 1941ce6e837c4261bae6d4387ca126ea
msgid ""
"Network policies imported directly via the :ref:`api_ref` apply to all "
"namespaces unless a namespace selector is specified as described below."
msgstr ""

#: ../../policy/kubernetes.rst:31 69dd192220d54f85a0cee99904a91464
msgid ""
"While specification of the namespace via the label "
"``k8s:io.kubernetes.pod.namespace`` in the ``fromEndpoints`` and "
"``toEndpoints`` fields is deliberately supported. Specification of the "
"namespace in the ``endpointSelector`` is prohibited as it would violate "
"the namespace isolation principle of Kubernetes. The ``endpointSelector``"
" always applies to pods of the namespace which is associated with the "
"CiliumNetworkPolicy resource itself."
msgstr ""

#: ../../policy/kubernetes.rst:40 81bb38f1cb2841ff978f1e95cd079e15
msgid "Example: Enforce namespace boundaries"
msgstr ""

#: ../../policy/kubernetes.rst:42 ae0b288d1e2a4035833a7ce29bf50c2b
msgid ""
"This example demonstrates how to enforce Kubernetes namespace-based "
"boundaries for the namespaces ``ns1`` and ``ns2`` by enabling default-"
"deny on all pods of either namespace and then allowing communication from"
" all pods within the same namespace."
msgstr ""

#: ../../policy/kubernetes.rst:47 3ba3ff91feb04a5a95b7320df196bc33
msgid ""
"The example locks down ingress of the pods in ``ns1`` and ``ns2``. This "
"means that the pods can still communicate egress to anywhere unless the "
"destination is in either ``ns1`` or ``ns2`` in which case both source and"
" destination have to be in the same namespace. In order to enforce "
"namespace boundaries at egress, the same example can be used by "
"specifying the rules at egress in addition to ingress."
msgstr ""

#: ../../policy/kubernetes.rst:57 ../../policy/kubernetes.rst:81
#: ../../policy/kubernetes.rst:102 ../../policy/kubernetes.rst:155
#: ../../policy/kubernetes.rst:176 ../../policy/kubernetes.rst:206
#: ../../policy/kubernetes.rst:223 ../../policy/kubernetes.rst:242
#: 18077429aed04a5b960454f6b88737f5 4d1df987f61241509bc07884f0d5d78e
#: 51bda53a6c6245768de7c0be033a10d4 75144afe2d5d4784a7b9c54b409a09b0
#: 8fb33e33f6f14837bd95606e0c36cfbb 9c473680f7c84f2c9a72f5d324981588
#: ac1894e4a5b74b08965a99fdb9ffadca adcf9ad16a064e85aed78a9d120d4a15
msgid "k8s YAML"
msgstr ""

#: ../../policy/kubernetes.rst:60 ../../policy/kubernetes.rst:84
#: ../../policy/kubernetes.rst:105 ../../policy/kubernetes.rst:158
#: 703a1f2c38524a8899d73b227c0bef62 83dd3227871f45e2a96777964215fc32
#: 97b752c6b0fd429a9b5ec82f1754bf30 bfed4800bedc4ed4ab6bedbfaac83edb
msgid "JSON"
msgstr ""

#: ../../policy/kubernetes.rst:69 7daa7f1bedeb4f5fbeb38adf3ae0cd64
msgid "Example: Expose pods across namespaces"
msgstr ""

#: ../../policy/kubernetes.rst:71 37a41e881de54ab1a6053e27db79ad1c
msgid ""
"The following example exposes all pods with the label ``name=leia`` in "
"the namespace ``ns1`` to all pods with the label ``name=luke`` in the "
"namespace ``ns2``."
msgstr ""

#: ../../policy/kubernetes.rst:75 58c3ce2b092f464e9d5fbb28635b7207
msgid ""
"Refer to the :git-tree:`example YAML files "
"<examples/policies/kubernetes/namespace/demo-pods.yaml>` for a fully "
"functional example including pods deployed to different namespaces."
msgstr ""

#: ../../policy/kubernetes.rst:93 3de52f051c504ae7b68ce868f9cc621c
msgid "Example: Allow egress to kube-dns in kube-system namespace"
msgstr ""

#: ../../policy/kubernetes.rst:95 1e20c0f550ad48eb8514c0cfd71fc05e
msgid ""
"The following example allows all pods in the ``public`` namespace in "
"which the policy is created to communicate with kube-dns on port 53/UDP "
"in the ``kube-system`` namespace."
msgstr ""

#: ../../policy/kubernetes.rst:115 dd558bed418a4ee488a47be1ea21c54b
msgid "ServiceAccounts"
msgstr ""

#: ../../policy/kubernetes.rst:117 6ee743b1099443999c7551898f100952
msgid ""
"Kubernetes `Service Accounts "
"<https://kubernetes.io/docs/concepts/configuration/assign-pod-node/>`_ "
"are used to associate an identity to a pod or process managed by "
"Kubernetes and grant identities access to Kubernetes resources and "
"secrets. Cilium supports the specification of network security policies "
"based on the service account identity of a pod."
msgstr ""

#: ../../policy/kubernetes.rst:124 bf75dbf1b7ba4285a43e75446a671882
msgid ""
"The service account of a pod is either defined via the `service account "
"admission controller <https://kubernetes.io/docs/reference/access-authn-"
"authz/admission-controllers/#serviceaccount>`_ or can be directly "
"specified in the Pod, Deployment, ReplicationController resource like "
"this:"
msgstr ""

#: ../../policy/kubernetes.rst:141 57747f66942b411786c3bc11904942ff
msgid "Example"
msgstr ""

#: ../../policy/kubernetes.rst:143 33f89f4ed27042ab97c8acb08e0e10b8
msgid ""
"The following example grants any pod running under the service account of"
" \"luke\" to issue a ``HTTP GET /public`` request on TCP port 80 to all "
"pods running associated to the service account of \"leia\"."
msgstr ""

#: ../../policy/kubernetes.rst:147 bd6c4b47d95148d1b96d46524bac0b42
msgid ""
"Refer to the :git-tree:`example YAML files "
"<examples/policies/kubernetes/serviceaccount/demo-pods.yaml>` for a fully"
" functional example including deployment and service account resources."
msgstr ""

#: ../../policy/kubernetes.rst:167 e7e4a326f3f747438ff2971b75e4b38d
msgid "Multi-Cluster"
msgstr ""

#: ../../policy/kubernetes.rst:169 9317eee86e7d43a9b4d5dd622f7366ac
msgid ""
"When operating multiple cluster with cluster mesh, the cluster name is "
"exposed via the label ``io.cilium.k8s.policy.cluster`` and can be used to"
" restrict policies to a particular cluster."
msgstr ""

#: ../../policy/kubernetes.rst:184 dff09b26071f4308a6cb2eeab35eda23
msgid ""
"Note the ``io.kubernetes.pod.namespace: default`` in the policy rule. It "
"makes sure the policy applies to ``rebel-base`` in the ``default`` "
"namespace of ``cluster2`` regardless of the namespace in ``cluster1`` "
"where ``x-wing`` is deployed in. If the namespace label of policy rules "
"is omitted it defaults to the same namespace where the policy itself is "
"applied in, which may be not what is wanted when deploying cross-cluster "
"policies."
msgstr ""

#: ../../policy/kubernetes.rst:193 87d6f849d4ee455980fdafea8ef01518
msgid "Clusterwide Policies"
msgstr ""

#: ../../policy/kubernetes.rst:195 ea516c7e89d94951b6aaba8dd7dd1d38
msgid ""
"`CiliumNetworkPolicy` only allows to bind a policy restricted to a "
"particular namespace. There can be situations where one wants to have a "
"cluster-scoped effect of the policy, which can be done using Cilium's "
"`CiliumClusterwideNetworkPolicy` Kubernetes custom resource. The "
"specification of the policy is same as that of `CiliumNetworkPolicy` "
"except that it is not namespaced."
msgstr ""

#: ../../policy/kubernetes.rst:200 5f51ca4828af439180a5c9cdbbbaa6d8
msgid ""
"In the cluster, this policy will allow ingress traffic from pods matching"
" the label ``name=luke`` from any namespace to pods matching the labels "
"``name=leia`` in any namespace."
msgstr ""

#: ../../policy/kubernetes.rst:215 646679c2dd594bc5983955a58be58f3b
msgid "Example: Allow all ingress to kube-dns"
msgstr ""

#: ../../policy/kubernetes.rst:217 235ac3e546284148a648b3a5d5729b36
msgid ""
"The following example allows all Cilium managed endpoints in the cluster "
"to communicate with kube-dns on port 53/UDP in the ``kube-system`` "
"namespace."
msgstr ""

#: ../../policy/kubernetes.rst:234 3ce0d101484746bdb7578061c4490cec
msgid "Example: Add health endpoint"
msgstr ""

#: ../../policy/kubernetes.rst:236 0ed23146a502489ab54eb13694020351
msgid ""
"The following example adds the health entity to all Cilium managed "
"endpoints in order to check cluster connectivity health."
msgstr ""

